sleep
        
{
    
    vec3 q1 = p;
    
    q1 -= vec3(0,0,0);
    q1 = rotateVec3(q1,vec3(0.0, 0.0, 0.0));
    
    vec3 q2 = q1;
    
    q2 -= vec3(0,0,0);
    q2 = rotateVec3(q2,vec3(0.0, 0.0, 0.0));
    
    vec3 q3 = q2;
    
    q3 -= vec3(0,0,0);
    q3 = rotateVec3(q3,vec3(0.0, 0.0, 0.0));
    
    float s3 = sdBox(q3,vec3(3.0, 1.5, 5.0));
    
    vec3 q4 = q2;
    
    q4 -= vec3(0,0,0);
    q4 = rotateVec3(q4,vec3(0.0, 0.0, 0.0));
    
    float s4 = sdBox(q4,vec3(3.0, 1.5, 5.0));
    
float s2 = opSmoothUnion(s3,s4,5);

    vec3 q5 = q1;
    
    q5 -= vec3(0,3,4);
    q5 = rotateVec3(q5,vec3(0.0, 0.0, 0.0));
    
    vec3 q6 = q5;
    
    q6 -= vec3(0,0,0);
    q6 = rotateVec3(q6,vec3(0.0, 0.0, 0.0));
    
    float s6 = sdBox(q6,vec3(3.0, 4.0, 2.0));
    
    vec3 q7 = q5;
    
    q7 -= vec3(0,2,0);
    q7 = rotateVec3(q7,vec3(0.0, 0.0, 0.0));
    
    float s7 = sdEllipsoid(q7,vec3(4,4,3));
    
float s5 = opSmoothUnion(s6,s7,2);

float s1 = opSmoothUnion(s2,s5,2);

        return s1;
}